@page "/admin"
@using Hoi4Strats.Components.Dialog
@using Hoi4Strats.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NotificationService NotificationService
    @inject DialogService DialogService

<h3>Admin - User Management</h3>

<RadzenDataGrid TItem="ApplicationUser" Data="@users" RowSelect="OnUserSelect">
    <Columns>
        <RadzenDataGridColumn TItem="ApplicationUser" Property="UserName" Title="Username" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="ApplicationUser" Title="Roles">
            <Template Context="user">
                @RolesCellTemplate(user)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationUser" Context="user">
            <Template>
                <RadzenButton Text="Edit Roles" Click="@(args => EditRoles(user))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    private List<ApplicationUser> users = new();
    private List<IdentityRole> roles = new();
    private ApplicationUser? selectedUser;
    private bool isEditRoleDialogVisible = false;
    private List<string> selectedRoles = new();

    private async Task EditRoles(ApplicationUser user)
    {
        selectedUser = user;
        selectedRoles = (await UserManager.GetRolesAsync(user)).ToList();

        // Skapa parameteruppsättningen med en Dictionary
        var parameters = new Dictionary<string, object>
    {
        { "SelectedUser", selectedUser },
        { "SelectedRoles", selectedRoles },
        { "Roles", roles }
    };

        // Använd OpenAsync för att öppna dialogen med parametrar
        var dialogResult = await DialogService.OpenAsync<EditRolesDialog>("Edit Roles", parameters);

        if (dialogResult != null)
        {
            var newRoles = (List<string>)dialogResult;
            await UserManager.RemoveFromRolesAsync(selectedUser, await UserManager.GetRolesAsync(selectedUser));
            await UserManager.AddToRolesAsync(selectedUser, newRoles);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Roles Updated",
                    Detail = $"Roles for {selectedUser.UserName} have been updated.",
                    Duration = 4000
                });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.Users.ToListAsync();
        roles = await RoleManager.Roles.ToListAsync();
    }

    private async Task OnUserSelect(ApplicationUser user)
    {
        selectedUser = user;
        selectedRoles = (await UserManager.GetRolesAsync(user)).ToList();
        isEditRoleDialogVisible = true;
    }

    private async Task SaveRoleChanges()
    {
        if (selectedUser != null)
        {
            var currentRoles = await UserManager.GetRolesAsync(selectedUser);
            await UserManager.RemoveFromRolesAsync(selectedUser, currentRoles);
            await UserManager.AddToRolesAsync(selectedUser, selectedRoles);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Roles Updated",
                    Detail = $"Roles for {selectedUser.UserName} have been updated.",
                    Duration = 4000
                });

            // Uppdatera rollerna i användarlistan
            var updatedRoles = await UserManager.GetRolesAsync(selectedUser);
            var userIndex = users.FindIndex(u => u.Id == selectedUser.Id);

            if (userIndex != -1)
            {
                users[userIndex] = selectedUser; // uppdatera användaren i listan
            }

            isEditRoleDialogVisible = false;
            selectedUser = null;
        }
    }

    private RenderFragment RolesCellTemplate(ApplicationUser user) => builder =>
    {
        var userRoles = UserManager.GetRolesAsync(user).Result; // Hämtar roller synkront för enkelhetens skull
        builder.AddContent(0, string.Join(", ", userRoles));
    };
}