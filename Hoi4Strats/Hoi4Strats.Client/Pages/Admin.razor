@page "/admin"
@using Hoi4Strats.Client.Pages.Dialog
@using Hoi4Strats.Client.Services
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Hoi4Strats.Client.Data
@inject UserService UService
@inject NotificationService NotificationService
@inject DialogService DialogService

<h3>Admin - User Management</h3>

<RadzenDataGrid TItem="ApplicationUser" Data="@users" RowSelect="OnUserSelect">
    <Columns>
        <RadzenDataGridColumn TItem="ApplicationUser" Property="UserName" Title="Username" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="Email" Title="Email" />
        <RadzenDataGridColumn TItem="ApplicationUser" Title="Roles">
            <Template Context="user">
                <UserRoleDisplay @ref="_userRoleDisplayref" UserId="@user.Id"></UserRoleDisplay>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationUser" Context="user">
            <Template>
                <RadzenButton Text="Edit Roles" Click="@(args => EditRoles(user))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code
{
    private List<ApplicationUser> users = new();
    private List<string> roles = new();
    private ApplicationUser? selectedUser;
    private bool isEditRoleDialogVisible = false;
    private List<string> selectedRoles = new();
    private UserRoleDisplay _userRoleDisplayref;

    private async Task EditRoles(ApplicationUser user)
    {
        selectedUser = user;
        selectedRoles = await UService.GetRolesAsync(user.Id);

        // Skapa parameteruppsättningen med en Dictionary
        var parameters = new Dictionary<string, object>
        {
            { "SelectedUser", selectedUser },
            { "SelectedRoles", selectedRoles },
            { "Roles", roles }
        };

        // Använd OpenAsync för att öppna dialogen med parametrar
        var dialogResult = await DialogService.OpenAsync<EditRolesDialog>("Edit Roles", parameters);

        if (dialogResult != null)
        {
            var newRoles = (List<string>)dialogResult;
            await UService.UpdateRolesAsync(selectedUser.Id, newRoles);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Roles Updated",
                    Detail = $"Roles for {selectedUser.UserName} have been updated.",
                    Duration = 4000
                });
        }
        if (_userRoleDisplayref != null)
{
    await _userRoleDisplayref.Update();
}
    }

    protected override async Task OnInitializedAsync()
    {
        users = await UService.GetUsersAsync();
        roles = await UService.GetAllRolesAsync();
    }

    private async Task OnUserSelect(ApplicationUser user)
    {
        selectedUser = user;
        selectedRoles = await UService.GetRolesAsync(user.Id);
        isEditRoleDialogVisible = true;
    }

    private RenderFragment RolesCellTemplate(ApplicationUser user) => builder =>
    {
        builder.OpenComponent<UserRoleDisplay>(0);
        builder.AddAttribute(1, "UserId", user.Id);
        builder.CloseComponent();
    };

}
