@using SharedProj
@using SharedProj.DBModels
@using System.Text.Json
@page "/LandTemplates"

@foreach(var guide in _templatesToDisplay)
{
    <TemplateDisplay GuideModel="guide"></TemplateDisplay>
}

@code 
{
    private List<GuideModel> _templatesToDisplay = new();

    private async Task<List<GuideModel>> FetchReviewGuides()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://localhost:7141/") }; // Ange korrekt basadress för API:et

        try
        {
            var response = await client.GetAsync("/get-guides");

            if (response.IsSuccessStatusCode)
            {
                var jsonData = await response.Content.ReadAsStringAsync();
                var guides = JsonSerializer.Deserialize<List<GuideModel>>(jsonData, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (guides != null)
                {
                    Console.WriteLine($"Fetched {guides.Count} guides for inspector.");
                    return guides;
                }
            }
            else
            {
                Console.WriteLine($"Failed to fetch guides: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception when fetching guides: {ex.Message}");
        }
        // fallback
        return new List<GuideModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        var x = await FetchReviewGuides();

        x = x.FindAll(x => x.Status == Review.Approved);
        _templatesToDisplay = x;
    }
}
