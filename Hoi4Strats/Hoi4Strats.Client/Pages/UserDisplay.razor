@using Hoi4Strats.Client.Services
@using System.Security.Claims
@inject AuthenticationStateProvider AuthProvider;
@inject NavigationManager NavMan;

<AuthorizeView>
    <NotAuthorized>
        @if (_user is null)
        {
            <RadzenButton Click="Login">Login</RadzenButton>
        }
    </NotAuthorized>
    <Authorized>
        @if (_user != null)
        {
            @if (_userID != null)
            {
                <h3>Roles:<UserRoleDisplay UserId="@_userID" /></h3>
            }
            <RadzenButton Click="LogOut">LogOut</RadzenButton>
            <RadzenButton Click="EditUser">@_user</RadzenButton>
        }
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <RadzenButton Click="AdminPanel" Text="AdminPanel" />
</AuthorizeView>
<AuthorizeView Roles="Editor">
    <RadzenButton Click="CreateGuide" Text="Create Guide"/>
</AuthorizeView>
<AuthorizeView Roles="GuideAdmin">
    <RadzenButton Click="InspectGuide" Text="Inspect Guides"/>
</AuthorizeView>
@code
{
    private string? _user;
    private string? _userID;
    private Task<AuthenticationState>? Auth;

    private void InspectGuide()
    {
        NavMan.NavigateTo("/Inspector");
    }

    private void CreateGuide()
    {
        NavMan.NavigateTo("/CreateGuide");
    }

    private void AdminPanel()
    {
        NavMan.NavigateTo("/Admin", true);
    }

    private void LogOut()
    {
        NavMan.NavigateTo("/LogOut", true);
    }

    private void Login()
    {
        NavMan.NavigateTo("/Account/Login", true);
    }

    private void EditUser()
    {
        NavMan.NavigateTo("/Account/Manage", true);
    }

    protected override async Task OnInitializedAsync()
    {
        await (Auth = AuthProvider.GetAuthenticationStateAsync());
        var _User = Auth.Result.User;

        if (Auth != null)
        {
            if (Auth.Result != null)
            {
                if (Auth.Result.User != null)
                {
                    var userID = _User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
                    _userID = userID;
                    if (Auth.Result.User.Identity != null)
                    {
                        if (Auth.Result.User.Identity.Name != null)
                        {
                            _user = Auth.Result.User.Identity.Name;
                        }
                    }
                }
            }
        }
    }
}