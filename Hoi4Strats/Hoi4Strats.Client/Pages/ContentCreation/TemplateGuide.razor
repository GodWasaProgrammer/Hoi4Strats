@using SharedProj
@using SharedProj.DBModels
@inject HttpClient client
<h3>Template Guide Creator</h3>

@if (typeOfGuide == GuideTypes.LandTemplate)
{
    <RadzenStack>
        <RadzenLabel Text="Select Land Template type" />
        <RadzenDropDown TValue="LandTemplate"
        Value="@landTemplate.ToString()"
        Data="@Enum.GetNames(typeof(LandTemplate))"
        Change="@(args => landTemplate = Enum.Parse<LandTemplate>(args.ToString()))"
        Style="width: 100%; max-width: 400px;"
        Name="LandTemplateDropdown" />
    </RadzenStack>
}

@if (typeOfGuide == GuideTypes.AirTemplate)
{
    <RadzenStack>
        <RadzenLabel Text="Select Land Template type" />
        <RadzenDropDown TValue="AirTemplate"
        Value="@airTemplate.ToString()"
        Data="@Enum.GetNames(typeof(AirTemplate))"
        Change="@(args => airTemplate = Enum.Parse<AirTemplate>(args.ToString()))"
        Style="width: 100%; max-width: 400px;"
        Name="LandTemplateDropdown" />
    </RadzenStack>
}

@if (typeOfGuide == GuideTypes.NavalTemplate)
{
    <RadzenStack>
        <RadzenLabel Text="Select Naval Template type" />
        <RadzenDropDown TValue="NavalTemplate"
        Value="@navalTemplate.ToString()"
        Data="@Enum.GetNames(typeof(NavalTemplate))"
        Change="@(args => navalTemplate = Enum.Parse<NavalTemplate>(args.ToString()))"
        Style="width: 100%; max-width: 400px;"
        Name="LandTemplateDropdown" />
    </RadzenStack>
}
@if (typeOfGuide == GuideTypes.AirTemplate || typeOfGuide == GuideTypes.LandTemplate || typeOfGuide == GuideTypes.NavalTemplate)
{
    <PictureUpload Fetchupload="HandleFileUploaded" />
    <RadzenTextArea Value="@explanationText" Style="width:200px" Placeholder="Short Explanatory text" />

    @if (explanationText != null && picture != "")
    {
        <RadzenButton Click="SubmitTemplateGuide" Style="width:200px" Text="submit for inspection" />
    }
}

@code
{
    [Parameter]
    public GuideTypes typeOfGuide { get; set; }
    private LandTemplate landTemplate = LandTemplate.Infantry;
    private AirTemplate airTemplate = AirTemplate.Fighter;
    private NavalTemplate navalTemplate = NavalTemplate.Destroyer;
    private string? explanationText { get; set; } = "";
    private string picture = "";

    private async Task SubmitTemplateGuide()
    {
        var newGuide = new GuideModel
            {
                Id = 0,
                Title = "Test",
                Content = explanationText,
                Author = "Author Name",
                CreatedAt = DateTime.UtcNow
            };

        var readImgBytes = File.ReadAllBytesAsync(picture);
        var img = new ImageModel { Content = readImgBytes.Result, ContentType = "png", Name = "test" };
        if (newGuide.Pictures != null)
        {
            newGuide.Pictures.Add(img);
        }

        var response = await client.PostAsJsonAsync("/create-template-guide", newGuide);
        var responseContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"Response Content: {responseContent}");
    }

    // passed into delegate to return our uploaded image
    private void HandleFileUploaded(string filePath)
    {
        picture = filePath;
    }
}
