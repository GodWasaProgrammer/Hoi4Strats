@using SharedProj
@using SharedProj.DBModels
@inject HttpClient client
@inject AuthenticationStateProvider AuthProvider

<h3>Template Guide Creator</h3>

@if (typeOfGuide == GuideTypes.LandTemplate)
{
    <RadzenStack>
        <RadzenLabel Text="Select Land Template type" />
        <RadzenDropDown TValue="LandTemplate"
        Value="@landTemplate.ToString()"
        Data="@Enum.GetNames(typeof(LandTemplate))"
        Change="@(args => landTemplate = Enum.Parse<LandTemplate>(args.ToString()))"
        Style="width: 100%; max-width: 400px;"
        Name="LandTemplateDropdown" />
    </RadzenStack>
}

@if (typeOfGuide == GuideTypes.AirTemplate)
{
    <RadzenStack>
        <RadzenLabel Text="Select Land Template type" />
        <RadzenDropDown TValue="AirTemplate"
        Value="@airTemplate.ToString()"
        Data="@Enum.GetNames(typeof(AirTemplate))"
        Change="@(args => airTemplate = Enum.Parse<AirTemplate>(args.ToString()))"
        Style="width: 100%; max-width: 400px;"
        Name="LandTemplateDropdown" />
    </RadzenStack>
}

@if (typeOfGuide == GuideTypes.NavalTemplate)
{
    <RadzenStack>
        <RadzenLabel Text="Select Naval Template type" />
        <RadzenDropDown TValue="NavalTemplate"
        Value="@navalTemplate.ToString()"
        Data="@Enum.GetNames(typeof(NavalTemplate))"
        Change="@(args => navalTemplate = Enum.Parse<NavalTemplate>(args.ToString()))"
        Style="width: 100%; max-width: 400px;"
        Name="LandTemplateDropdown" />
    </RadzenStack>
}
@if (typeOfGuide == GuideTypes.AirTemplate || typeOfGuide == GuideTypes.LandTemplate || typeOfGuide == GuideTypes.NavalTemplate)
{
    @if (_title == "")
    {
        <RadzenTextBox Style="width:200px" Placeholder="Title?" @bind-Value="@_title"></RadzenTextBox>
    }
    <PictureUploadByteArray Fetchupload="HandleFileUploaded" />
    <RadzenTextArea @bind-Value=@explanationText Style="width:200px" Placeholder="Short Explanatory text" />

    <RadzenButton Click="SubmitTemplateGuide" Style="width:200px" Text="submit for inspection" />
    <RadzenText>@_submissionFeedBack</RadzenText>

}

@code
{
    [Parameter]
    public GuideTypes typeOfGuide { get; set; }
    private LandTemplate landTemplate = LandTemplate.Infantry;
    private AirTemplate airTemplate = AirTemplate.Fighter;
    private NavalTemplate navalTemplate = NavalTemplate.Destroyer;
    private string explanationText { get; set; } = "";
    private ImageModel? picture;
    private string? _submissionFeedBack;
    private string _title = "";

    [Parameter]
    public Action<bool> ResetGuide { get; set; } 

    private async Task SubmitTemplateGuide()
    {
        if (explanationText != "" && _title != "")
        {
            var user = AuthProvider.GetAuthenticationStateAsync();

            var newGuide = new GuideModel
                {
                    Id = 0,
                    Title = _title,
                    Content = explanationText,
                    Author = user?.Result?.User?.Identity?.Name ?? "Unknown",
                    CreatedAt = DateTime.UtcNow,
                    GuideType = typeOfGuide
                };

            if (picture != null && newGuide.Pictures != null)
            {
                newGuide.Pictures.Add(picture);
            }

            var response = await client.PostAsJsonAsync("/create-guide", newGuide);
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response Content: {responseContent}");
            ResetGuide?.Invoke(response.IsSuccessStatusCode);
        }
        else
        {
            if (explanationText == "")
            {
                _submissionFeedBack = "You need to provide a short explanation/Summary of your template.";
            }
            if (picture == null)
            {
                _submissionFeedBack = "You need to upload an image";
            }
        }
    }

    // passed into delegate to return our uploaded image
    private void HandleFileUploaded(ImageModel UploadedImage)
    {
        picture = UploadedImage;
    }
}