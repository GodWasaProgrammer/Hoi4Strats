@page "/CreateGuide"
@using Shared.DBModels
@using Shared
@using System
@using Microsoft.JSInterop
@using System.Collections.Generic
@using System.Text
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@inject HttpClient client;
<h3>Create Guide</h3>
<RadzenStack>
    <RadzenLabel Text="Select Value" Component="DropDownChangeEvent" />
    <RadzenDropDown Value="@selectedGuide" TValue="string" Data="@Guides" Change="@(args => selectedGuide = $"{args}")" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent"></RadzenDropDown>

    <RadzenStack>
        @if (selectedGuide != "Select Guide Type")
        {
            <RadzenHtmlEditor UploadUrl="upload/image" />
            //<EventConsole @ref=@console />
            <RadzenButton Click="(() => SubmitGuide())">Submit for review</RadzenButton>
        }
    </RadzenStack>

</RadzenStack>

@code
{
    string selectedGuide = "Select Guide Type";
    TextEditor MyEditor = new();
    IEnumerable<string>? Guides;
    Lists lists = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Guides = lists.Guidetypes;
    }

    string htmlValue = @"<h2 style=""text-align:center"">Accelerated, smarter, and cost-effective Blazor development</h2>
    <h3 style=""text-align:center"">Radzen Blazor Studio provides tons of productivity gains for Blazor developers</h3>
    <div style=""text-align:center"">
        <img alt=""Radzen Blazor Studio"" src=""images/radzen-blazor-studio-dark.png"" width=""300"">
    </div>
    <h4 style=""text-align:center"">Get started today. Radzen Blazor Studio is free to use.</h4>
    <div style=""text-align:center"">
        <a href=""https://www.radzen.com/blazor-studio/download/"" target=""_blank"" title=""Get Radzen Blazor Studio for Windows, Mac or Linux"">Download Now</a>
    </div>";

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        // console.Log($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
       // console.Log($"Change: {html}");
    }

    void OnInput(string html)
    {
       // console.Log($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
      //  console.Log($"Execute: {args.CommandName}");
    }

    void OnUploadComplete(UploadCompleteEventArgs args)
    {
      //  console.Log($"Upload complete: {args.RawResponse}");
    }

    private async Task SubmitGuide()
    {
        var newGuide = new Guide
            {
                Id = 0,
                Title = "New Guide",
                Content = "Guide content here...",
                Author = "Author Name",
                CreatedAt = DateTime.UtcNow
            };

        var response = await client.PostAsJsonAsync("/create-guide", newGuide);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Guide successfully created!");
        }
        else
        {
            Console.WriteLine("Error creating guide.");
        }
    }

}