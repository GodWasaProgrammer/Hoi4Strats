@page "/CreateGuide"
@using SharedProj.DBModels
@using SharedProj
@using System
@using Microsoft.JSInterop
@using System.Collections.Generic
@using System.Text
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@inject HttpClient client;
<h3>Create Guide</h3>

@if (Title == "")
{
    <RadzenTextBox Placeholder="Title?" @bind-Value="@Title"></RadzenTextBox>
}

@if (Title != "")
{
    @if (selectedGuide == "Select Guide Type")
    {
        <RadzenStack>
            <RadzenLabel Text="Select Value" Component="DropDownChangeEvent" />
            <RadzenDropDown Value="@selectedGuide" TValue="string" Data="@Guides" Change="@(args => selectedGuide = $"{args}")" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent"></RadzenDropDown>
        </RadzenStack>

    }
    <RadzenStack>
        @if (selectedGuide != "Select Guide Type")
        {
            <RadzenHtmlEditor @bind-Value=@htmlValue style="height: 450px;" Input=@OnInput
                              Change=@OnChange
                              Paste=@OnPaste
                              UploadComplete=@OnUploadComplete
                              Execute=@OnExecute
                              UploadUrl="upload/image" />
            //<EventConsole @ref=@console />
            <RadzenButton Click="(() => SubmitGuide())">Submit for review</RadzenButton>
        }
    </RadzenStack>

}


@code
{
    string Title = "";

    string htmlValue = @"<h2 style=""text-align:center"">Din guide här</h2>";

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }

    void OnInput(string html)
    {
        Console.WriteLine($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");
    }

    void OnUploadComplete(UploadCompleteEventArgs args)
    {
        Console.WriteLine($"Upload complete: {args.RawResponse}");
    }


    string selectedGuide = "Select Guide Type";
    IEnumerable<string>? Guides;
    Lists lists = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Guides = lists.Guidetypes;
    }

    private async Task SubmitGuide()
    {
        var newGuide = new GuideModel
            {
                Id = 0,
                Title = Title,
                Content = htmlValue,
                Author = "Author Name",
                CreatedAt = DateTime.UtcNow
            };

        var response = await client.PostAsJsonAsync("/create-guide", newGuide);
        var responseContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"Response Content: {responseContent}");
    }
}