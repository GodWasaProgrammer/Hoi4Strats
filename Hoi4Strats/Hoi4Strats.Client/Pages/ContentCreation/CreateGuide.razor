@page "/CreateGuide"
@using SharedProj.DBModels
@using SharedProj
@using System
@using System.Collections.Generic
@using System.Text
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@inject HttpClient client;
@inject AuthenticationStateProvider authProvider
<h3>Create Guide</h3>

<RadzenStack>
    <RadzenStack>
        <RadzenLabel Text="Select Guide Type" />
        <RadzenDropDown TValue="string"
                        Value="@typeOfGuide.ToString()"
                        Data="@Enum.GetNames(typeof(GuideTypes))"
                        Change="@(args => typeOfGuide = Enum.Parse<GuideTypes>(args.ToString()))"
                        Style="width: 100%; max-width: 400px;"
                        Name="GuideTypeDropdown" />
    </RadzenStack>

    <p>Selected Guide Type: @typeOfGuide</p>

    @if (typeOfGuide == GuideTypes.LandTemplate || typeOfGuide == GuideTypes.AirTemplate || typeOfGuide == GuideTypes.NavalTemplate)
    {
        <TemplateGuide typeOfGuide="typeOfGuide" />
    }

    <RadzenStack>
        @if (typeOfGuide == GuideTypes.Country)
        {
            @if (Title == "")
            {
                <RadzenTextBox Style="width:200px" Placeholder="Title?" @bind-Value="@Title"></RadzenTextBox>
            }
            @if (Title != "")
            {
                <RadzenHtmlEditor @bind-Value=@htmlValue style="height: 450px;" Input=@OnInput
                                  Change=@OnChange
                                  Paste=@OnPaste
                                  UploadComplete=@OnUploadComplete
                                  Execute=@OnExecute
                                  UploadUrl="upload/image" />
                //<EventConsole @ref=@console />
                <RadzenButton Click="(() => SubmitGuide())">Submit for review</RadzenButton>
            }
        }
    </RadzenStack>
</RadzenStack>

@code
{
    string Title = "";
    string htmlValue = @"<h2 style=""text-align:center"">Din guide här</h2>";
    private GuideTypes typeOfGuide = GuideTypes.Select;
    private LandTemplate landTemplate = LandTemplate.Infantry;


    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }

    void OnInput(string html)
    {
        Console.WriteLine($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");
    }

    void OnUploadComplete(UploadCompleteEventArgs args)
    {
        Console.WriteLine($"Upload complete: {args.RawResponse}");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task SubmitGuide()
    {
        var user = authProvider.GetAuthenticationStateAsync();
        var newGuide = new GuideModel
            {
                Id = 0,
                Title = Title,
                Content = htmlValue,
                Author = user?.Result?.User?.Identity?.Name ?? "Unknown",
                CreatedAt = DateTime.UtcNow,
                GuideType = typeOfGuide
            };

        var response = await client.PostAsJsonAsync("/create-guide", newGuide);
        var responseContent = await response.Content.ReadAsStringAsync();
        Console.WriteLine($"Response Content: {responseContent}");
    }
}