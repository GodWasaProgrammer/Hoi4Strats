@page "/CreateGuide"
@using SharedProj.DBModels
@using SharedProj
@using System
@using System.Collections.Generic
@using System.Text
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@inject HttpClient client;
@inject AuthenticationStateProvider authProvider
@inject NotificationService NotificationService
<h3>Create Guide</h3>

<RadzenStack>
    <RadzenStack>
        <RadzenLabel Text="Select Guide Type" />
        <RadzenDropDown TValue="string"
        Value="@typeOfGuide.ToString()"
        Data="@Enum.GetNames(typeof(GuideTypes))"
        Change="@(args => typeOfGuide = Enum.Parse<GuideTypes>(args.ToString()))"
        Style="width: 100%; max-width: 400px;"
        Name="GuideTypeDropdown" />
    </RadzenStack>

    <p>Selected Guide Type: @typeOfGuide</p>

    @if (typeOfGuide == GuideTypes.LandTemplate || typeOfGuide == GuideTypes.AirTemplate || typeOfGuide == GuideTypes.NavalTemplate)
    {
        <TemplateGuide typeOfGuide="typeOfGuide" ResetGuide="CleanUp" />
    }

    <RadzenStack>
        @if (typeOfGuide == GuideTypes.Country)
        {
            <RadzenStack>
                <RadzenLabel Text="Major or Minor?" />
                <RadzenDropDown TValue="SelectCountryType"
                Value="@selectCountryType.ToString()"
                Data="@Enum.GetNames(typeof(SelectCountryType))"
                Change="@(args => selectCountryType = Enum.Parse<SelectCountryType>(args.ToString()))"
                Style="width: 100%; max-width: 400px;"
                Name="majororminor" />
            </RadzenStack>
            @if (selectCountryType != SelectCountryType.Select)
            {
                DecideCountryType();
                @if (major)
                {
                    <RadzenStack>
                        <RadzenLabel Text="Pick Country" />
                        <RadzenDropDown TValue="Majors"
                        Value="@majors.ToString()"
                        Data="@Enum.GetNames(typeof(Majors))"
                        Change="@(args => majors = Enum.Parse<Majors>(args.ToString()))"
                        Style="width: 100%; max-width: 400px;"
                        Name="majororminor" />
                    </RadzenStack>
                }
                if (minor)
                {
                    <RadzenStack>
                        <RadzenLabel Text="Pick Country" />
                        <RadzenDropDown TValue="Minors"
                        Value="@minors.ToString()"
                        Data="@Enum.GetNames(typeof(Minors))"
                        Change="@(args => minors = Enum.Parse<Minors>(args.ToString()))"
                        Style="width: 100%; max-width: 400px;"
                        Name="majororminor" />
                    </RadzenStack>
                }
                @if (Title == "")
                {
                    <RadzenTextBox Style="width:200px" Placeholder="Title?" @bind-Value="@Title"></RadzenTextBox>
                }
                @if (Title != "")
                {
                    <RadzenHtmlEditor @bind-Value=@htmlValue style="height: 450px;" Input=@OnInput
                    Change=@OnChange
                    Paste=@OnPaste
                    UploadComplete=@OnUploadComplete
                    Execute=@OnExecute
                    UploadUrl="upload/blob"
                    UploadHeaders="@_uploadUrl" />
                    //<EventConsole @ref=@console />
                    <RadzenButton Click="(() => SubmitGuide())">Submit for review</RadzenButton>
                }
            }
        }
    </RadzenStack>
</RadzenStack>

@code
{
    string Title = "";
    string htmlValue = @"<h2 style=""text-align:center"">Din guide här</h2>";
    private GuideTypes typeOfGuide = GuideTypes.Select;
    private LandTemplate landTemplate = LandTemplate.Infantry;
    private Dictionary<string, string>? _uploadUrl;
    private Majors majors;
    private Minors minors;
    private SelectCountryType selectCountryType;
    private bool major;
    private bool minor;

    private void DecideCountryType()
    {
        if (selectCountryType.ToString() == "Majors")
        {
            minor = false;
            major = true;
        }
        if (selectCountryType.ToString() == "Minors")
        {
            major = false;
            minor = true;
        }
    }

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }

    void OnInput(string html)
    {
        Console.WriteLine($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");
    }

    void OnUploadComplete(UploadCompleteEventArgs args)
    {
        Console.WriteLine($"Upload complete: {args.RawResponse}");
    }
    private string uploadSessionId = Guid.NewGuid().ToString();

    protected override async Task OnInitializedAsync()
    {
        _uploadUrl = new Dictionary<string, string>
        {
            { "Upload-Session-Id", uploadSessionId }
        };
        await base.OnInitializedAsync();
    }

    private async Task SubmitGuide()
    {
        var user = authProvider.GetAuthenticationStateAsync();
        var newGuide = new GuideModel
            {
                Id = 0,
                Title = Title,
                Content = htmlValue,
                Author = user?.Result?.User?.Identity?.Name ?? "Unknown",
                CreatedAt = DateTime.UtcNow,
                GuideType = typeOfGuide
            };
        if (major)
        {
            newGuide.MajorCountry = majors;
        }
        if(minor)
        {
            newGuide.MinorCountry = minors;
        }
        var response = await client.PostAsJsonAsync("/create-guide", newGuide);
        var responseContent = await response.Content.ReadAsStringAsync();
        CleanUp(response.IsSuccessStatusCode);
        Console.WriteLine($"Response Content: {responseContent}");
    }

    private void CleanUp(bool success)
    {
        typeOfGuide = GuideTypes.Select;
        landTemplate = LandTemplate.Infantry;
        htmlValue = @"<h2 style=""text-align:center"">Din guide här</h2>";
        string Title = "";
        // Kontrollera resultatet och visa notifiering
        if (success)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guide Submission",
                    Detail = "Guide have been submitted Successfully.",
                    Duration = 4000
                });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Update Failed",
                    Detail = $"Failed to create your guide submission",
                    Duration = 4000
                });
        }
        StateHasChanged();
    }
}