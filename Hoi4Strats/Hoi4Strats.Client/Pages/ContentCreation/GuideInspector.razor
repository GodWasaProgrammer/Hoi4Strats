@page "/Inspector"
@using Hoi4Strats.Client.Services
@using SharedProj.DBModels
@using SharedProj
@using Radzen
@using System.Text.Json
@inject DataService dataService
<AuthorizeView Roles="Admin, GuideAdmin">
    @if (IsAppLoaded)
    {

        @if (!GuideSelected)
        {
            <RadzenButton Click="(() => ToggleList(_UnderReview))">Pending Reviews</RadzenButton>
            <RadzenButton Click="(() => ToggleList(ApprovedGuides))">Approved Guides</RadzenButton>
            <RadzenButton Click="(() => ToggleList(RejectGuides))">Rejected Guides</RadzenButton>

            @if (ViewGuides)
            {
                <div>
                    <RadzenDataGrid TItem="GuideModel" Data="@DisplayList" AllowPaging="true" PageSize="pagesize" RowClick="OnCountryGuideClicked">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(GuideModel.Title)" Title="Title" />
                            <RadzenDataGridColumn Property="@nameof(GuideModel.Author)" Title="Author" />
                            <RadzenDataGridColumn Property="@nameof(GuideModel.CreatedAt)" Title="Created" />
                            <RadzenDataGridColumn Property="@nameof(GuideModel.Pictures)" Title="No. Of Pics">
                                <Template Context="guide">
                                    @guide.Pictures?.Count
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Property="@nameof(GuideModel.GuideType)" Title="Type" />
                            <RadzenDataGridColumn Property="@nameof(GuideModel.MajorCountry)" Title="Major" />
                            <RadzenDataGridColumn Property="@nameof(GuideModel.MinorCountry)" Title="Minor" />
                        </Columns>
                    </RadzenDataGrid>
                </div>
            }
        }
        @if (GuideSelected)
        {
            <Inspector GM="@_GM" ResetSelection="ResetSelection" />
            <RadzenButton Click="ResetSelection">Cancel</RadzenButton>
        }
    }
    else
    {
        <RadzenProgressBarCircular Value="75" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
</AuthorizeView>

@code
{
    private bool IsAppLoaded;

    List<GuideModel> DisplayList = new();
    List<GuideModel> ApprovedGuides = new();
    List<GuideModel> RejectGuides = new();
    List<GuideModel> _UnderReview = new();
    private RadzenDataGrid<GuideModel>? templateGrid;
    private bool GuideSelected = false;
    private GuideModel? _GM;
    private Review review;
    private readonly int pagesize = 20;

    private bool ViewGuides;
    private void ToggleList(List<GuideModel> ChosenList)
    {
        DisplayList = new();
        DisplayList = ChosenList;
        ViewGuides = true;
    }

    private void ResetSelection()
    {
        GuideSelected = false;
        _GM = null;
        PageSetUp();
        StateHasChanged();
    }

    private async void PageSetUp()
    {
        await dataService.BuildLists();
        ApprovedGuides = [];
        ApprovedGuides = dataService.ApprovedGuides;
        RejectGuides = [];
        RejectGuides = dataService.RejectedGuides;
        _UnderReview = [];
        _UnderReview = dataService.UnderReviewGuides;
        IsAppLoaded = true;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        PageSetUp();

        StateHasChanged();
    }

    private void OnTemplateGuideClicked(DataGridRowMouseEventArgs<GuideModel> ClickedGuide)
    {
        Console.WriteLine($"Clicked on Template Guide: {ClickedGuide.Data.Author}");
        _GM = ClickedGuide.Data;
        GuideSelected = true;
    }

    private void OnCountryGuideClicked(DataGridRowMouseEventArgs<GuideModel> ClickedGuide)
    {
        Console.WriteLine($"Clicked on Country Guide: {ClickedGuide.Data.Author}");
        _GM = ClickedGuide.Data;
        GuideSelected = true;
    }
}
