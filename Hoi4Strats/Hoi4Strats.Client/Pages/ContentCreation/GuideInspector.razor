@page "/Inspector"
@using SharedProj.DBModels
@using SharedProj
@using Radzen
@using System.Text.Json

<h3>GuideInspector</h3>
<AuthorizeView Roles="Admin, GuideAdmin">

    <h3>This is where Guide Administrator approve Guides/Templates</h3>
    @if (!GuideSelected)
    {
        <RadzenButton Click="ToggleUnderReview">View Pending Reviews</RadzenButton>
        <RadzenButton Click="ToggleApproved">View Approved Guides</RadzenButton>
        <RadzenButton Click="ToggleRejected">View Rejected Guides</RadzenButton>
        @if (_viewApprovedGuides)
        {
            <div>
                <RadzenText>approved guides</RadzenText>
                <RadzenDataGrid TItem="GuideModel" Data="@ApprovedGuides" SelectionMode="DataGridSelectionMode.Single" AllowPaging="true" PageSize="pagesize" RowClick="OnTemplateGuideClicked">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(GuideModel.Author)" Title="Author" />
                        <RadzenDataGridColumn Property="@nameof(GuideModel.CreatedAt)" Title="Created" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        }
        @if (_viewUnderReviewGuides)
        {
            <div>
                <RadzenText>Templates</RadzenText>
                <RadzenDataGrid @ref="templateGrid" TItem="GuideModel" Data="@TemplatesToInspect" SelectionMode="DataGridSelectionMode.Single" AllowPaging="true" PageSize="pagesize" RowClick="OnTemplateGuideClicked">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(GuideModel.Author)" Title="Author" />
                        <RadzenDataGridColumn Property="@nameof(GuideModel.CreatedAt)" Title="Created" />
                    </Columns>
                </RadzenDataGrid>
            </div>

            <div>
                <RadzenText>Countries</RadzenText>
                <RadzenDataGrid TItem="GuideModel" Data="@CountryGuidesToInspect" AllowPaging="true" PageSize="pagesize" RowClick="OnCountryGuideClicked">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(GuideModel.Title)" Title="Title" />
                        <RadzenDataGridColumn Property="@nameof(GuideModel.Author)" Title="Author" />
                        <RadzenDataGridColumn Property="@nameof(GuideModel.CreatedAt)" Title="Created" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        }
        @if(_viewRejectedGuides)
        {
            <div>
                <RadzenText>Templates</RadzenText>
                <RadzenDataGrid TItem="GuideModel" Data="@RejectGuides" SelectionMode="DataGridSelectionMode.Single" AllowPaging="true" PageSize="pagesize" RowClick="OnTemplateGuideClicked">
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(GuideModel.Author)" Title="Author" />
                        <RadzenDataGridColumn Property="@nameof(GuideModel.CreatedAt)" Title="Created" />
                    </Columns>
                </RadzenDataGrid>
            </div>
        }

    }
    @if (GuideSelected)
    {
        <Inspector GM="@_GM" ResetSelection="ResetSelection" />
    }
</AuthorizeView>

@code
{
    List<GuideModel> CountryGuidesToInspect = new();
    List<GuideModel> ApprovedGuides;
    List<GuideModel> RejectGuides;
    List<GuideModel> TemplatesToInspect = new();
    private RadzenDataGrid<GuideModel>? templateGrid;
    private bool GuideSelected = false;
    private GuideModel? _GM;
    private Review review;
    private int pagesize = 20;

    private bool _viewApprovedGuides;
    private void ToggleApproved()
    {
        _viewUnderReviewGuides = false;
        _viewRejectedGuides = false;
        _viewApprovedGuides = !_viewApprovedGuides;
    }

    private bool _viewUnderReviewGuides;
    private void ToggleUnderReview()
    {
        _viewApprovedGuides = false;
        _viewRejectedGuides = false;
        _viewUnderReviewGuides = !_viewUnderReviewGuides;
    }

    private bool _viewRejectedGuides;
    private void ToggleRejected()
    {
        _viewApprovedGuides = false;
        _viewUnderReviewGuides = false;
        _viewRejectedGuides = !_viewRejectedGuides;
    }

    private async void ResetSelection()
    {
        GuideSelected = false;
        _GM = null;
        await PageSetUp();
        StateHasChanged();
    }

    private async Task<List<GuideModel>> FetchReviewGuides()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://localhost:7141/") }; // Ange korrekt basadress för API:et

        try
        {
            var response = await client.GetAsync("/get-guides");

            if (response.IsSuccessStatusCode)
            {
                var jsonData = await response.Content.ReadAsStringAsync();
                var guides = JsonSerializer.Deserialize<List<GuideModel>>(jsonData, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (guides != null)
                {
                    Console.WriteLine($"Fetched {guides.Count} guides for inspector.");
                    return guides;
                }
            }
            else
            {
                Console.WriteLine($"Failed to fetch guides: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception when fetching guides: {ex.Message}");
        }
        // fallback
        return new List<GuideModel>();
    }

    private async Task PageSetUp()
    {
        var guides = await FetchReviewGuides();
        TemplatesToInspect = new();
        CountryGuidesToInspect = new();
        RejectGuides = new();
        ApprovedGuides = new();

        foreach (var guide in guides)
        {
            if (guide.Status == Review.UnderReview)
            {
                if (guide.GuideType == GuideTypes.Country)
                {
                    CountryGuidesToInspect.Add(guide);
                }
                if (guide.GuideType == GuideTypes.AirTemplate || guide.GuideType == GuideTypes.LandTemplate || guide.GuideType == GuideTypes.NavalTemplate)
                {
                    TemplatesToInspect.Add(guide);
                }
            }
            if (guide.Status == Review.Approved)
            {
                ApprovedGuides.Add(guide);
            }
            if (guide.Status == Review.Rejected)
            {
                RejectGuides.Add(guide);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await PageSetUp();
    }
    private void OnTemplateGuideClicked(DataGridRowMouseEventArgs<GuideModel> ClickedGuide)
    {
        Console.WriteLine($"Clicked on Template Guide: {ClickedGuide.Data.Author}");
        _GM = ClickedGuide.Data;
        GuideSelected = true;
    }
    private void OnCountryGuideClicked(DataGridRowMouseEventArgs<GuideModel> ClickedGuide)
    {
        Console.WriteLine($"Clicked on Country Guide: {ClickedGuide.Data.Author}");
        _GM = ClickedGuide.Data;
        GuideSelected = true;
    }
}
