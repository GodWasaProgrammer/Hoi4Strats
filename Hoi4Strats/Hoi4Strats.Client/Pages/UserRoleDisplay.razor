@using SharedProj
@using Hoi4Strats.Client.Services
@using System.Security.Claims
@inject UserService UService
@inject AuthenticationStateProvider AuthStateProvider

@if (_isLoading)
{
    <span>Laddar roller...</span>
}
else
{
    @if (_roles != null)
    {
        @if (_roles.Count > 0)
        {
            <span>@string.Join(", ", _roles)</span>
        }
        else
        {
            <span>@_noRoles</span>
        }
    }
}

@code
{
    [Parameter]
    public string? UserId { get; set; }
    private string _noRoles = "No Roles";
    private List<string>? _roles;
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            var bla = await AuthStateProvider.GetAuthenticationStateAsync();
            if (bla.User != null)
            {
                if (bla.User.Identity != null)
                {
                    if (bla.User.Identity.IsAuthenticated)
                    {
                        _roles = new();
                        var roles = bla.User.Claims.ToList();
                        foreach (var role in roles)
                        {
                            if (role.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
                            {
                                var rolex = role.Value;
                                _roles.Add(rolex);
                            }
                        }
                    }
                }
            }
            //await LoadRolesAsync();
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task RefreshRoles()
    {
        await LoadRolesAsync();
        StateHasChanged();
    }

    private async Task LoadRolesAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            _isLoading = true;
            _roles = await UService.GetRolesAsync(UserId);
            _isLoading = false;
        }
    }
}